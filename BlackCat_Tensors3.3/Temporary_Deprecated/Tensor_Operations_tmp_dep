#include "BC_Tensor_Types/Expression_Unary_Cacher.h"
#include "BC_Tensor_Types/Expression_Binary_Correlation.h"
#include "BC_Tensor_Types/Expression_Binary_Correlation_Padded.h"
#include "BC_Tensor_Types/Expression_Binary_Correlation_Stack.h"
#include "BC_Tensor_Types/Expression_Binary_Correlation_Padded_Stack.h"
#include "BC_Tensor_Types/Expression_Binary_Correlation_Error.h"

	template<class pDeriv>
	auto operator =(const alternate_asterix_denoter<pDeriv>& param) {
		assert_same_size(param.get());
		return bi_expr<BC::cache<mathlib_type>>(param.get());
	}


	 //--------------------------------More_Complex Operations------------------------------//
	template<class deriv>
	auto corr(const Tensor_Operations<deriv>& rv) const {
		assert_same_size(rv);
		return typename tensor_of<0>::template type<
				binary_expression<functor_type, _functor<deriv>,
						_x_corr<1, inner>>, mathlib_type>(as_derived().internal(),
				rv.as_derived().internal());
	}

	template<int mv, class type = inner, class deriv>
	auto x_corr(const Tensor_Operations<deriv>& rv) const {

		return typename tensor_of<mv>::template type<
				binary_expression<functor_type, _functor<deriv>,
						_x_corr<mv, type>>, mathlib_type>(as_derived().internal(),
				rv.as_derived().internal());
	}
	template<int mv, class type = inner, class deriv>
	auto x_corr_stack(const Tensor_Operations<deriv>& rv) const {

		return typename tensor_of<mv + 1>::template type<
				binary_expression<functor_type, _functor<deriv>,
						_x_corr_stack<mv, type>>, mathlib_type>(
				as_derived().internal(), rv.as_derived().internal());
	}


